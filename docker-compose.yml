services:
  # frontend:
  #   build:
  #     context: ./frontend/music-app
  #     dockerfile: Dockerfile
  #   command: sh -c "yarn build && yarn start"
  #   container_name: nextjs-frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     NODE_ENV: production
  #   volumes:
  #     - ./frontend/music-app:/app

  getaway:
    build: ./backend/getaway
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    container_name: getaway
    restart: always
    ports:
      - "8000:8000"

  user-service:
    build: ./backend/user-service
    container_name: user-service
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    restart: always
    ports:
      - "8001:8001"
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy

  track-service:
    build: ./backend/track-service
    container_name: track-service
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
    restart: always
    ports:
      - "8002:8002"
    depends_on:
      minio:
        condition: service_healthy
      postgresql:
        condition: service_healthy

  # settings-service:
  #   build: ./backend/settings-service
  #   container_name: settings-service
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8003 --reload
  #   restart: always
  #   ports:
  #     - "8003:8003"
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     postgresql:
  #       condition: service_healthy

  # search-service:
  #   build: ./backend/search-service
  #   container_name: search-service
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8004 --reload
  #   restart: always
  #   ports:
  #     - "8004:8004"
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     postgresql:
  #       condition: service_healthy

  # playlist-service:
  #   build: ./backend/playlist-service
  #   container_name: playlist-service
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8005 --reload
  #   restart: always
  #   ports:
  #     - "8005:8005"
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     postgresql:
  #       condition: service_healthy

  # payment-service:
  #   build: ./backend/payment-service
  #   container_name: payment-service
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8006 --reload
  #   restart: always
  #   ports:
  #     - "8006:8006"
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     postgresql:
  #       condition: service_healthy

  # albums-service:
  #   build: ./backend/albums-service
  #   container_name: albums-service
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8007 --reload
  #   restart: always
  #   ports:
  #     - "8007:8007"
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     postgresql:
  #       condition: service_healthy

  postgresql:
    build: ./postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: musicdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d musicdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    build: ./redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf

  minio:
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - minio_data:/data

  rabbitmq:
    build: ./rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmqadmin
      RABBITMQ_DEFAULT_PASS: rabbitmqadmin

  elasticsearch:
    build: ./elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"

volumes:
  minio_data:
